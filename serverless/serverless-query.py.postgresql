#!/usr/bin/env python

# serverless database query -- postgreSQL example

# Copyright 2016 Amazon.com, Inc. or its affiliates.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#    http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file.
# This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions
# and limitations under the License.

import psycopg2
import logging
import traceback
from os import environ


endpoint=environ.get('ENDPOINT')
port=environ.get('PORT')
dbuser=environ.get('DBUSER')
password=environ.get('DBPASSWORD')
database=environ.get('DATABASE')

query="SELECT * FROM amzn.serverless_test LIMIT 2"

logger=logging.getLogger()
logger.setLevel(logging.INFO)

def make_connection():
    conn_str="host={0} dbname={1} user={2} password={3} port={4}".format(
        endpoint,database,dbuser,password,port)
    return psycopg2.connect(conn_str)


def log_err(errmsg):
    logger.error(errmsg)
    return {"body": errmsg , "headers": {}, "statusCode": 400,
        "isBase64Encoded":"false"}

try:
    cnx = make_connection()
    logger.info("Cold start complete.")
except:
    conn_info='Endpoint: {0}\nPort: {1}\nDbUser: {2}\nPassword: *******\nDatabase={3}\n'.format(
        endpoint, port, dbuser, database)
    logger.error("\nERROR: Cannot connect to database from outside handler.\n{0}\n{1}\n".format(
        conn_info, traceback.format_exc()))


def handler(event,context):

    global cnx

    try:
        cursor=cnx.cursor()
        cursor.execute(query)
    except:
        try:
            cnx = make_connection()
            cursor=cnx.cursor()
            logger.info("Database connection lost. Re-connected from inside handler.")
        except:
            return log_err("ERROR: Cannot connect to database from inside handler.\n{}".format(
                traceback.format_exc()))
        try:
            cursor.execute(query)
        except:
            return log_err ("ERROR: Cannot execute cursor.\n{}".format(
                traceback.format_exc()) )

    try:
        results_list=[]
        for result in cursor: results_list.append(result)
        print(results_list)
        cursor.close()
    except:
        return log_err ("ERROR: Cannot retrieve query data.\n{}".format(
            traceback.format_exc()))


    return {"body": str(results_list), "headers": {}, "statusCode": 200,
        "isBase64Encoded":"false"}

if __name__== "__main__":
    handler(None,None)

